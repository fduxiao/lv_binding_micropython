# This script is used to remove functions from the files generated by
# gen_mpy. If the functions are not removed it leads to linking errors during
# compilation.

# The functions that get removed are
# mp_gpio_force_hold_all
# mp_gpio_force_unhold_all
# mp_gpio_force_unhold_all_mpobj
# mp_adc_digi_start_mpobj
# mp_adc_digi_stop_mpobj
# mp_adc_digi_deinitialize_mpobj
# mp_tcpip_adapter_set_default_eth_handlers_mpobj
# mp_tcpip_adapter_clear_default_wifi_handlers_mpobj
# mp_tcpip_adapter_clear_default_eth_handlers_mpobj
# mp_tcpip_adapter_set_default_wifi_handlers_mpobj
# mp_esp_netif_init_mpobj
# mp_esp_netif_deinit_mpobj
# mp_mdns_init_mpobj
# mp_mdns_service_remove_all_mpobj

# the bottom 11 functions have to be removed because they are reliant on
# the mp_gpio_force_hold_all function. There is no real reason to make them
# accessable using Python code.

import sys
path = sys.argv[1]

with open(path, 'r') as f:
    data = f.read()

data = data.split('\n')
found = False

functions = ['mp_gpio_force_hold_all', 'mp_gpio_force_unhold_all']

for i, line in enumerate(data):
    if found and line.strip() == '}':
        found = False
        line += '*/'
        data[i] = line
    elif not found:
        for fun in functions:
            if fun in line:
                break
        else:
            continue

        if 'MP_DEFINE_CONST_LV_FUN_' in line:
            fun = line.split('(', 1)[-1].split(',', 1)[0]
            if fun not in functions:
                functions.append(fun)
            line = '//' + line

        elif 'MP_ROM_QSTR' in line:
            line = '//' + line
        else:
            line = '/*' + line
            found = True

        data[i] = line

print(functions)

with open(path[:-4], 'w') as f:
    f.write('\n'.join(data))
